export { DL_STATE, Emitter, StateMachine } from './core/state.js'; export { RegionManager } from './core/region.js'; export { SEOManager } from './core/seo.js'; export { ViewAdapter } from './core/view.js'; export { RequestOrchestrator } from './core/request.js'; export { SSEBridge } from './core/sse.js'; export { debounce, backoff, deepMerge } from './core/utils.js'; import { Emitter, StateMachine, DL_STATE } from './core/state.js'; import { RegionManager } from './core/region.js'; import { SEOManager } from './core/seo.js'; import { ViewAdapter } from './core/view.js'; import { RequestOrchestrator } from './core/request.js'; export class DOMLifeCore{constructor(){this.bus=new Emitter();this.state=new StateMachine(this.bus);this.regions=new RegionManager(document);this.seo=new SEOManager(document);this.view=new ViewAdapter(document);this.server={async query(p,b){const r=await fetch(p,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(b||{})});if(!r.ok)throw new Error('HTTP '+r.status);return r.json().catch(()=>({}))},async create(p,b){return this.query(p,b)},async read(p,b){return this.query(p,b)},async update(p,b){return this.query(p,b)},async delete(p,b){return this.query(p,b)},};this.request=new RequestOrchestrator({state:this.state,server:this.server,regions:this.regions,seo:this.seo,bus:this.bus})}use({server,view,seo,regions}={}){if(server)this.server=server;if(view)this.view=view;if(seo)this.seo=seo;if(regions)this.regions=regions;this.request=new RequestOrchestrator({state:this.state,server:this.server,regions:this.regions,seo:this.seo,bus:this.bus});return this}region(id,sel,opts){this.regions.add(id,sel,opts);return this}onState(s,fn){return this.state.on(s,fn)}}