import { DL_STATE } from './state.js'; import { backoff } from './utils.js'; export class RequestOrchestrator{constructor({state,server,regions,seo,bus}){this.state=state;this.server=server;this.regions=regions;this.seo=seo;this.bus=bus}async run({regionId,op='query',path='/',body={},render,timeout=10000,retries=1}){await this.state.to(DL_STATE.EVENT_REQUESTED,{regionId,op});await this.state.to(DL_STATE.BROWSER_RECOGNIZED,{regionId,op});this.regions?.setLoading(regionId,true);await this.state.to(DL_STATE.SERVER_SENT,{path});await this.state.to(DL_STATE.SERVER_PROCESSING,{});let resp;for(let i=0;i<=retries;i++){try{resp=await this.server[op](path,body,{timeout});break;}catch(e){if(i===retries){this.regions?.setLoading(regionId,false);throw e;}await this.state.to(DL_STATE.RETRY_WAITING,{i});await backoff(i);}}await this.state.to(DL_STATE.SERVER_RESPONDED,{resp});await this.state.to(DL_STATE.BROWSER_RECEIVING,{});if(render){await this.state.to(DL_STATE.DOM_RENDERING,{});try{render(resp,this.regions,this.seo);}catch(e){}}await this.state.to(DL_STATE.CLIENT_PROCESSING,{});await this.state.to(DL_STATE.CLIENT_DONE,{});this.regions?.setLoading(regionId,false);await this.state.to(DL_STATE.LOADING_END,{});return resp}}